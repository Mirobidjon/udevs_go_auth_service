// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: position_service.proto

package settings_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PositionServiceClient is the client API for PositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PositionServiceClient interface {
	Create(ctx context.Context, in *CreatePositionRequest, opts ...grpc.CallOption) (*Position, error)
	GetByID(ctx context.Context, in *PositionPrimaryKey, opts ...grpc.CallOption) (*Position, error)
	GetList(ctx context.Context, in *GetPositionListRequest, opts ...grpc.CallOption) (*GetPositionListResponse, error)
	Update(ctx context.Context, in *UpdatePositionRequest, opts ...grpc.CallOption) (*Position, error)
	Delete(ctx context.Context, in *PositionPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
	AddLevelItem(ctx context.Context, in *AddLevelItemRequest, opts ...grpc.CallOption) (*Position, error)
	UpdateLevelItem(ctx context.Context, in *UpdateLevelItemRequest, opts ...grpc.CallOption) (*Position, error)
	RemoveLevelItem(ctx context.Context, in *RemoveLevelItemRequest, opts ...grpc.CallOption) (*Position, error)
}

type positionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPositionServiceClient(cc grpc.ClientConnInterface) PositionServiceClient {
	return &positionServiceClient{cc}
}

func (c *positionServiceClient) Create(ctx context.Context, in *CreatePositionRequest, opts ...grpc.CallOption) (*Position, error) {
	out := new(Position)
	err := c.cc.Invoke(ctx, "/settings_service.PositionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) GetByID(ctx context.Context, in *PositionPrimaryKey, opts ...grpc.CallOption) (*Position, error) {
	out := new(Position)
	err := c.cc.Invoke(ctx, "/settings_service.PositionService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) GetList(ctx context.Context, in *GetPositionListRequest, opts ...grpc.CallOption) (*GetPositionListResponse, error) {
	out := new(GetPositionListResponse)
	err := c.cc.Invoke(ctx, "/settings_service.PositionService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) Update(ctx context.Context, in *UpdatePositionRequest, opts ...grpc.CallOption) (*Position, error) {
	out := new(Position)
	err := c.cc.Invoke(ctx, "/settings_service.PositionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) Delete(ctx context.Context, in *PositionPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/settings_service.PositionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) AddLevelItem(ctx context.Context, in *AddLevelItemRequest, opts ...grpc.CallOption) (*Position, error) {
	out := new(Position)
	err := c.cc.Invoke(ctx, "/settings_service.PositionService/AddLevelItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) UpdateLevelItem(ctx context.Context, in *UpdateLevelItemRequest, opts ...grpc.CallOption) (*Position, error) {
	out := new(Position)
	err := c.cc.Invoke(ctx, "/settings_service.PositionService/UpdateLevelItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *positionServiceClient) RemoveLevelItem(ctx context.Context, in *RemoveLevelItemRequest, opts ...grpc.CallOption) (*Position, error) {
	out := new(Position)
	err := c.cc.Invoke(ctx, "/settings_service.PositionService/RemoveLevelItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PositionServiceServer is the server API for PositionService service.
// All implementations must embed UnimplementedPositionServiceServer
// for forward compatibility
type PositionServiceServer interface {
	Create(context.Context, *CreatePositionRequest) (*Position, error)
	GetByID(context.Context, *PositionPrimaryKey) (*Position, error)
	GetList(context.Context, *GetPositionListRequest) (*GetPositionListResponse, error)
	Update(context.Context, *UpdatePositionRequest) (*Position, error)
	Delete(context.Context, *PositionPrimaryKey) (*empty.Empty, error)
	AddLevelItem(context.Context, *AddLevelItemRequest) (*Position, error)
	UpdateLevelItem(context.Context, *UpdateLevelItemRequest) (*Position, error)
	RemoveLevelItem(context.Context, *RemoveLevelItemRequest) (*Position, error)
	mustEmbedUnimplementedPositionServiceServer()
}

// UnimplementedPositionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPositionServiceServer struct {
}

func (UnimplementedPositionServiceServer) Create(context.Context, *CreatePositionRequest) (*Position, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPositionServiceServer) GetByID(context.Context, *PositionPrimaryKey) (*Position, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedPositionServiceServer) GetList(context.Context, *GetPositionListRequest) (*GetPositionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPositionServiceServer) Update(context.Context, *UpdatePositionRequest) (*Position, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPositionServiceServer) Delete(context.Context, *PositionPrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPositionServiceServer) AddLevelItem(context.Context, *AddLevelItemRequest) (*Position, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLevelItem not implemented")
}
func (UnimplementedPositionServiceServer) UpdateLevelItem(context.Context, *UpdateLevelItemRequest) (*Position, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLevelItem not implemented")
}
func (UnimplementedPositionServiceServer) RemoveLevelItem(context.Context, *RemoveLevelItemRequest) (*Position, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLevelItem not implemented")
}
func (UnimplementedPositionServiceServer) mustEmbedUnimplementedPositionServiceServer() {}

// UnsafePositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PositionServiceServer will
// result in compilation errors.
type UnsafePositionServiceServer interface {
	mustEmbedUnimplementedPositionServiceServer()
}

func RegisterPositionServiceServer(s grpc.ServiceRegistrar, srv PositionServiceServer) {
	s.RegisterService(&PositionService_ServiceDesc, srv)
}

func _PositionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings_service.PositionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).Create(ctx, req.(*CreatePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings_service.PositionService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).GetByID(ctx, req.(*PositionPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings_service.PositionService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).GetList(ctx, req.(*GetPositionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings_service.PositionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).Update(ctx, req.(*UpdatePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings_service.PositionService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).Delete(ctx, req.(*PositionPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_AddLevelItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLevelItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).AddLevelItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings_service.PositionService/AddLevelItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).AddLevelItem(ctx, req.(*AddLevelItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_UpdateLevelItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLevelItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).UpdateLevelItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings_service.PositionService/UpdateLevelItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).UpdateLevelItem(ctx, req.(*UpdateLevelItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PositionService_RemoveLevelItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLevelItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PositionServiceServer).RemoveLevelItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings_service.PositionService/RemoveLevelItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PositionServiceServer).RemoveLevelItem(ctx, req.(*RemoveLevelItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PositionService_ServiceDesc is the grpc.ServiceDesc for PositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "settings_service.PositionService",
	HandlerType: (*PositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PositionService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _PositionService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _PositionService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PositionService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PositionService_Delete_Handler,
		},
		{
			MethodName: "AddLevelItem",
			Handler:    _PositionService_AddLevelItem_Handler,
		},
		{
			MethodName: "UpdateLevelItem",
			Handler:    _PositionService_UpdateLevelItem_Handler,
		},
		{
			MethodName: "RemoveLevelItem",
			Handler:    _PositionService_RemoveLevelItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "position_service.proto",
}
